version: '3.8'

services:
  mongo1:
    image: mongo:6.0
    container_name: ${PREFIX}_mongo1
    hostname: mongo1
    # command: ["mongod", "--replSet", "rs0"]
    command: ["mongod", "--replSet", "rs0", "--bind_ip", "0.0.0.0"]
    ports:
      - "49824:27017"
    volumes:
      - ./mongo/mongo1-data:/data/db
      # - ./mongo/config/mongo-keyfile:/data/mongo-keyfile  # Mount the key file
    networks:
      - blockcall-network

  mongo2:
    image: mongo:6.0
    container_name: ${PREFIX}_mongo2
    hostname: mongo2
    # command: ["mongod", "--replSet", "rs0"]
    command: ["mongod", "--replSet", "rs0", "--bind_ip", "0.0.0.0"]
    ports:
      - 27018:27017
    volumes:
      - ./mongo/mongo2-data:/data/db
      # - ./mongo/config/mongo-keyfile:/data/mongo-keyfile  # Mount the key file
    networks:
      - blockcall-network

  mongo3:
    image: mongo:6.0
    container_name: ${PREFIX}_mongo3
    hostname: mongo3
    # command: ["mongod", "--replSet", "rs0"]
    command: ["mongod", "--replSet", "rs0", "--bind_ip", "0.0.0.0"]
    ports:
      - 27019:27017
    volumes:
      - ./mongo/mongo3-data:/data/db
      # - ./mongo/config/mongo-keyfile:/data/mongo-keyfile  # Mount the key file
    networks:
      - blockcall-network

  ################################
  # Setup Mongo express container
  ################################
  mongo-express:
    image: mongo-express
    container_name: ${PREFIX}_mongo-express
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo1,mongo2,mongo3:27017/?replicaSet=rs0
      # ME_CONFIG_MONGODB_URL: mongodb://admin:Somkid058848391@mongo1,mongo2,mongo3:27017/?replicaSet=rs0&authSource=admin
      ME_CONFIG_MONGODB_SERVER: mongo1
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
    ports:
      - "1983:8081"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - blockcall-network

  ################################
  # Setup Api Graphql container
  ################################
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev   
    container_name: ${PREFIX}_backend          
    ports:
      - "1984:4000"
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # set can run docker inside ex. run docker backup db(a4_mongo)
      - ./backend/src:/app/src        
      - ./uploads:/app/uploads  
      - ./mongo/backups:/app/backups
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - blockcall-network

networks:
  blockcall-network:
    external: true

    
# Step #1 docker exec -it xxxx bash
# Step #2 mongosh
# Step #2.1 rs.status()
# Step #3 rs.initiate({_id: "rs0", members: [{ _id: 0, host: "mongo1:27017" }, { _id: 1, host: "mongo2:27017" }, { _id: 2, host: "mongo3:27017" }]})

# Step #4
# ต้อง add user ก่อนด้วย
# use xxxx
# db.createUser({
#   user: "",
#   pwd: "",
#   roles: [{ role: "root", db: "xxxx" }]
# })

# db.createUser({
#   user: "",
#   pwd: "",
#   roles: [{ role: "readWrite", db: "" }]
# })
